{"version":3,"sources":["Components/AddCategory.jsx","Components/helpers/getGif.js","Components/hooks/useFetchGif.js","Components/GridGifItem.jsx","Components/GridGif.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","prev","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","title","useFetchGif","loading","state","setState","useEffect","then","imgs","catch","err","console","warn","GridGifItem","className","src","alt","GridGif","GifExpertApp","onClick","ReactDOM","render","document","getElementById"],"mappings":"mMA6BeA,EA1BK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAY,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACtCN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdrB,SAACP,GACpBF,EAAcE,EAAMQ,OAAOF,a,+BCPlBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UACpDH,GAFkB,+DAKDI,MAAMF,GALL,cAKdG,EALc,gBAOGA,EAAKC,OAPR,uBAOZC,EAPY,EAOZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,IAClCY,MAAOJ,EAAII,UAbK,kBAiBbN,GAjBa,4CAAH,sDCoBJO,EAjBK,SAACf,GACnB,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNS,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OARAC,qBAAU,WACRpB,EAAOC,GACJoB,MAAK,SAACC,GAAD,OAAUH,EAAS,CAAEX,KAAMc,EAAML,SAAS,OAC/CM,OAAM,SAACC,GACNC,QAAQC,KAAKF,QAEhB,CAACvB,IAEGiB,GCNMS,EATK,SAAC,GAAoB,IAAlBxB,EAAiB,EAAjBA,IAAKY,EAAY,EAAZA,MAC1B,OACE,sBAAKa,UAAU,8CAAf,UACE,qBAAKC,IAAK1B,EAAK2B,IAAKf,IACpB,4BAAIA,QCcKgB,EAhBC,SAAC,GAAkB,IAAhB9B,EAAe,EAAfA,SACjB,EAAkCe,EAAYf,GAAhCY,EAAd,EAAQL,KAAcS,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAKhB,IACL,sBAAK2B,UAAU,iBAAf,UACGX,GAAW,cACXJ,EAAOH,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,cCYjBoB,EArBM,WACnB,MAAgC7C,mBAAS,CAAC,eAA1C,mBAAOc,EAAP,KAAiBf,EAAjB,KAKA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,uBACA,wBAAQ+C,QARM,aAQd,iBACA,6BACGhC,EAASS,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAASA,SAAUA,GAAeA,Y,MCb5CiC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.0664fb5a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategory }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategory((prev) => [inputValue, ...prev]);\n      setInputValue(\"\");\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategory: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGif = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=1nDCilskUXlq041znlUgzOJ0yApoeFPC`;\n\n  const resp = await fetch(url);\n\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      url: img.images?.downsized_medium.url,\n      title: img.title,\n    };\n  });\n\n  return gifs;\n};\n","import { useEffect, useState } from \"react\";\nimport { getGif } from \"../helpers/getGif\";\n\nconst useFetchGif = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGif(category)\n      .then((imgs) => setState({ data: imgs, loading: false }))\n      .catch((err) => {\n        console.warn(err);\n      });\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGif;\n","import React from \"react\";\n\nconst GridGifItem = ({ url, title }) => {\n  return (\n    <div className=\"grid-item animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GridGifItem;\n","import React from \"react\";\nimport useFetchGif from \"./hooks/useFetchGif\";\nimport GridGifItem from \"./GridGifItem\";\n\nconst GridGif = ({ category }) => {\n  const { data: images, loading } = useFetchGif(category);\n\n  return (\n    <>\n      <h1>{category}</h1>\n      <div className=\"grid-container\">\n        {loading && \"Cargando...\"}\n        {images.map((img) => (\n          <GridGifItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GridGif;\n","import React, { useState } from \"react\";\nimport AddCategory from \"./Components/AddCategory\";\nimport GridGif from \"./Components/GridGif\";\n\nconst GifExpertApp = () => {\n  const [category, setCategory] = useState([\"Scooby Doo\"]);\n\n  const handleAdd = () => {\n    // setCategory((prev) => [...prev, \"Street Fighter\"]);\n  };\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategory={setCategory} />\n      <hr />\n      <button onClick={handleAdd}>Add</button>\n      <ol>\n        {category.map((category) => (\n          <GridGif category={category} key={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}